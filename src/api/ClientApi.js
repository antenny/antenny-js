/**
 * Antenny API
 * This is an api that allows you to interact with the Antenny platform. It allows you to manage your clients and subscriptions.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@antenny.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Client from '../model/Client';
import ClientList from '../model/ClientList';
import NewClient from '../model/NewClient';

/**
* Client service.
* @module api/ClientApi
* @version 1.1.0
*/
export default class ClientApi {

    /**
    * Constructs a new ClientApi. 
    * @alias module:api/ClientApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates a client
     * Creates a new client
     * @param {module:model/NewClient} newClient 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Client} and HTTP response
     */
    createClientWithHttpInfo(newClient) {
      let postBody = newClient;
      // verify the required parameter 'newClient' is set
      if (newClient === undefined || newClient === null) {
        throw new Error("Missing the required parameter 'newClient' when calling createClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Client;
      return this.apiClient.callApi(
        '/clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a client
     * Creates a new client
     * @param {module:model/NewClient} newClient 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Client}
     */
    createClient(newClient) {
      return this.createClientWithHttpInfo(newClient)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a client
     * Deletes a client
     * @param {String} clientId Client Id to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteClientWithHttpInfo(clientId) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling deleteClient");
      }

      let pathParams = {
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/clients/{clientId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a client
     * Deletes a client
     * @param {String} clientId Client Id to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteClient(clientId) {
      return this.deleteClientWithHttpInfo(clientId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a client
     * Gets a client for a customer
     * @param {String} clientId Client Id to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Client} and HTTP response
     */
    getClientWithHttpInfo(clientId) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClient");
      }

      let pathParams = {
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Client;
      return this.apiClient.callApi(
        '/clients/{clientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a client
     * Gets a client for a customer
     * @param {String} clientId Client Id to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Client}
     */
    getClient(clientId) {
      return this.getClientWithHttpInfo(clientId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of clients
     * List of clients for a customer
     * @param {String} custId Customer Id to get clients for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort Defines sort direction
     * @param {Number} opts.limit Limits the number of returned items
     * @param {String} opts.startKey Defines start of page of results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientList} and HTTP response
     */
    listClientsWithHttpInfo(custId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'custId' is set
      if (custId === undefined || custId === null) {
        throw new Error("Missing the required parameter 'custId' when calling listClients");
      }

      let pathParams = {
        'custId': custId
      };
      let queryParams = {
        'sort': opts['sort'],
        'limit': opts['limit'],
        'startKey': opts['startKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientList;
      return this.apiClient.callApi(
        '/customers/{custId}/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of clients
     * List of clients for a customer
     * @param {String} custId Customer Id to get clients for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort Defines sort direction
     * @param {Number} opts.limit Limits the number of returned items
     * @param {String} opts.startKey Defines start of page of results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClientList}
     */
    listClients(custId, opts) {
      return this.listClientsWithHttpInfo(custId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
