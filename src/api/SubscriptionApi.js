/**
 * Antenny API
 * This is an api that allows you to interact with the Antenny platform. It allows you to manage your clients and subscriptions.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@antenny.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import NewSubscription from '../model/NewSubscription';
import Subscription from '../model/Subscription';
import SubscriptionList from '../model/SubscriptionList';

/**
* Subscription service.
* @module api/SubscriptionApi
* @version 1.0.0
*/
export default class SubscriptionApi {

    /**
    * Constructs a new SubscriptionApi. 
    * @alias module:api/SubscriptionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancels a subscription
     * Cancels a subscription for a customer
     * @param {String} subId Subscription id
     * @param {module:model/InlineObject} inlineObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    cancelSubscriptionWithHttpInfo(subId, inlineObject) {
      let postBody = inlineObject;
      // verify the required parameter 'subId' is set
      if (subId === undefined || subId === null) {
        throw new Error("Missing the required parameter 'subId' when calling cancelSubscription");
      }
      // verify the required parameter 'inlineObject' is set
      if (inlineObject === undefined || inlineObject === null) {
        throw new Error("Missing the required parameter 'inlineObject' when calling cancelSubscription");
      }

      let pathParams = {
        'subId': subId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancels a subscription
     * Cancels a subscription for a customer
     * @param {String} subId Subscription id
     * @param {module:model/InlineObject} inlineObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    cancelSubscription(subId, inlineObject) {
      return this.cancelSubscriptionWithHttpInfo(subId, inlineObject)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a subscription
     * Creates a new subscription
     * @param {module:model/NewSubscription} newSubscription 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Subscription} and HTTP response
     */
    createSubscriptionWithHttpInfo(newSubscription) {
      let postBody = newSubscription;
      // verify the required parameter 'newSubscription' is set
      if (newSubscription === undefined || newSubscription === null) {
        throw new Error("Missing the required parameter 'newSubscription' when calling createSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a subscription
     * Creates a new subscription
     * @param {module:model/NewSubscription} newSubscription 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Subscription}
     */
    createSubscription(newSubscription) {
      return this.createSubscriptionWithHttpInfo(newSubscription)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a subscription
     * Gets a subscription
     * @param {String} subId Subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Subscription} and HTTP response
     */
    getSubscriptionWithHttpInfo(subId) {
      let postBody = null;
      // verify the required parameter 'subId' is set
      if (subId === undefined || subId === null) {
        throw new Error("Missing the required parameter 'subId' when calling getSubscription");
      }

      let pathParams = {
        'subId': subId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/subscriptions/{subId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a subscription
     * Gets a subscription
     * @param {String} subId Subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Subscription}
     */
    getSubscription(subId) {
      return this.getSubscriptionWithHttpInfo(subId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of subscriptions
     * Lists subscriptions for a customer
     * @param {String} custId Customer Id to get subscriptions
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort Defines sort direction
     * @param {Number} opts.limit Limits the number of returned items
     * @param {String} opts.startKey Defines start of page of results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriptionList} and HTTP response
     */
    listSubscriptionsWithHttpInfo(custId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'custId' is set
      if (custId === undefined || custId === null) {
        throw new Error("Missing the required parameter 'custId' when calling listSubscriptions");
      }

      let pathParams = {
        'custId': custId
      };
      let queryParams = {
        'sort': opts['sort'],
        'limit': opts['limit'],
        'startKey': opts['startKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionList;
      return this.apiClient.callApi(
        '/customers/{custId}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of subscriptions
     * Lists subscriptions for a customer
     * @param {String} custId Customer Id to get subscriptions
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort Defines sort direction
     * @param {Number} opts.limit Limits the number of returned items
     * @param {String} opts.startKey Defines start of page of results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriptionList}
     */
    listSubscriptions(custId, opts) {
      return this.listSubscriptionsWithHttpInfo(custId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
