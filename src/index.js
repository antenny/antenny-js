/**
 * Antenny API
 * This is an api that allows you to interact with the Antenny platform. It allows you to manage your clients and subscriptions.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@antenny.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Client from './model/Client';
import ClientList from './model/ClientList';
import Endpoint from './model/Endpoint';
import Event from './model/Event';
import EventList from './model/EventList';
import Header from './model/Header';
import InlineObject from './model/InlineObject';
import Message from './model/Message';
import NewClient from './model/NewClient';
import NewSubscription from './model/NewSubscription';
import Registration from './model/Registration';
import Resource from './model/Resource';
import Subscription from './model/Subscription';
import SubscriptionList from './model/SubscriptionList';
import ClientApi from './api/ClientApi';
import EventsApi from './api/EventsApi';
import RegistrationApi from './api/RegistrationApi';
import SubscriptionApi from './api/SubscriptionApi';


/**
* Api client for antenny.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var antenny = require('index'); // See note below*.
* var xxxSvc = new antenny.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new antenny.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new antenny.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new antenny.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Client model constructor.
     * @property {module:model/Client}
     */
    Client,

    /**
     * The ClientList model constructor.
     * @property {module:model/ClientList}
     */
    ClientList,

    /**
     * The Endpoint model constructor.
     * @property {module:model/Endpoint}
     */
    Endpoint,

    /**
     * The Event model constructor.
     * @property {module:model/Event}
     */
    Event,

    /**
     * The EventList model constructor.
     * @property {module:model/EventList}
     */
    EventList,

    /**
     * The Header model constructor.
     * @property {module:model/Header}
     */
    Header,

    /**
     * The InlineObject model constructor.
     * @property {module:model/InlineObject}
     */
    InlineObject,

    /**
     * The Message model constructor.
     * @property {module:model/Message}
     */
    Message,

    /**
     * The NewClient model constructor.
     * @property {module:model/NewClient}
     */
    NewClient,

    /**
     * The NewSubscription model constructor.
     * @property {module:model/NewSubscription}
     */
    NewSubscription,

    /**
     * The Registration model constructor.
     * @property {module:model/Registration}
     */
    Registration,

    /**
     * The Resource model constructor.
     * @property {module:model/Resource}
     */
    Resource,

    /**
     * The Subscription model constructor.
     * @property {module:model/Subscription}
     */
    Subscription,

    /**
     * The SubscriptionList model constructor.
     * @property {module:model/SubscriptionList}
     */
    SubscriptionList,

    /**
    * The ClientApi service constructor.
    * @property {module:api/ClientApi}
    */
    ClientApi,

    /**
    * The EventsApi service constructor.
    * @property {module:api/EventsApi}
    */
    EventsApi,

    /**
    * The RegistrationApi service constructor.
    * @property {module:api/RegistrationApi}
    */
    RegistrationApi,

    /**
    * The SubscriptionApi service constructor.
    * @property {module:api/SubscriptionApi}
    */
    SubscriptionApi
};
